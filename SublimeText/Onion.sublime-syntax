%YAML 1.2
---
file_extensions:
  - oni
scope: source.example-c
contexts:
  main:
    # Strings begin and end with quotes, and use backslashes as an escape
    # character
    - match: '"'
      scope: punctuation.definition.string.begin.example-c
      push: double_quoted_string

    # Comments begin with a '//' and finish at the end of the line
    - match: '//'
      scope: punctuation.definition.comment.example-c
      push: line_comment

    # Keywords are if, else for and while.
    # Note that blackslashes don't need to be escaped within single quoted
    # strings in YAML. When using single quoted strings, only single quotes
    # need to be escaped: this is done by using two single quotes next to each
    # other.
    - match: '\b(if|else|for|while|do|sin|cos|new_dictionary|add|get_by_key|not|print|n|as_var|var|input|def|use|stop|import|sout|continue|return|new_stack|get_stack|append|get_by_index|variable|try|init|class|to_import|throw_new_exception|true|false|to_string|foreach|to|to_bool|NULL|E|PI|GOLDEN_RATIO|to_int|new_arr|get_arr|exit|sleep|key_press|sout_element|eval|length|split)\b'
      scope: keyword.control.example-c
    - match: '\b(math)\b'
      scope: constant.character

    # Numbers
    - match: '\b(-)?[0-9<>:;]+\b'
      scope: constant.numeric.example-c

  double_quoted_string:
    - meta_scope: string.quoted.double.example-c
    - match: ''
      scope: constant.character.escape.example-c
    - match: '"'
      scope: punctuation.definition.string.end.example-c
      pop: true

  line_comment:
    - meta_scope: comment.line.example-c
    - match: '$'
      pop: true
